#!/usr/bin/env python3

"""ksp-telemetry.py

This script graphs the telemetry data generated by Mechjeb, a Kerbal Space Program mod.
"""

# Copyright(C) 2019 Al2Me6
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

__version__ = "1.1.0"

import argparse
import os
import sys
from typing import Dict, List, Tuple

import matplotlib.pyplot as plt

# Mechjeb saves data in a CSV file, with columns in this order
MET = 0
STAGE = 1
ALT_ASL = 2
DIST = 3
SRF_VEL = 4
ORB_VEL = 5
MASS = 6
ACCEL = 7
DYN_PRES = 8
AOA = 9
AOS = 10
AOD = 11
ALT_TRUE = 12
PITCH = 13
GRAV_L = 14
DRAG_L = 15
STEERING_L = 16
DV_EXP = 17

parser = argparse.ArgumentParser(description=f"KSP Telemetry Grapher v{__version__}",
                                 allow_abbrev=False)
parser.add_argument("telemetry",
                    metavar="TELEMETRY_FILE",
                    type=argparse.FileType('r'),
                    help="path to Mechjeb telemetry CSV")
parser.add_argument("--title",
                    metavar="TITLE",
                    type=str,
                    help="add TITLE to graph")
parser.add_argument("--verbose",
                    action="store_true",
                    help="graph additional data")
parser.add_argument("--out",
                    metavar="OUTPUT",
                    type=argparse.FileType('wb'),
                    help="save graph to OUTPUT, allowable filetypes: eps, jpeg, \
                          jpg, pdf, pgf, png, ps, raw, rgba, svg, svgz, tif, tiff")
parser.add_argument("--no-view",
                    action="store_true",
                    help="do not view graph after generation (requires --out)")
args = parser.parse_args()

# "dependent" argument parsing
if args.no_view and not args.out:  # argument should be of type None if not passed
    parser.print_usage(sys.stderr)
    print(f"{os.path.basename(__file__)}: error: argument --no-view: requires argument --out",
          file=sys.stderr)
    sys.exit(2)

print(f"KSP Telemetry Grapher v{__version__}")

telemetry_data: Dict[int, List[float]] = {data_type: [] for data_type in range(18)}

print(f"Loading Mechjeb telemetry file \"{args.telemetry.name}\"")
# convert column of rows to row of columns
for data_entry in [line.strip("\n").split(",") for line in args.telemetry.readlines()[1:]]:
    for data_type in telemetry_data.keys():
        telemetry_data[data_type].append(float(data_entry[data_type]))
args.telemetry.close()


def arrange_subplots() -> Tuple[int, int]:
    """Return correct arrangement of plots according to verbosity"""
    return (2, 3) if args.verbose else (2, 2)


fig = plt.figure(figsize=(14, 6) if args.verbose else (10, 6))

if args.title:
    fig.suptitle(args.title, fontsize=14)

plt.subplot(*arrange_subplots(), 1)  # asterisk expands tuple
plt.plot([dist / 1000 for dist in telemetry_data[DIST]],  # convert to km
         [alt_asl / 1000 for alt_asl in telemetry_data[ALT_ASL]])
plt.title("Launch Profile")
plt.xlabel("Distance downrange (km)")
plt.ylabel("Altitude ASL (km)")
plt.grid()

plt.subplot(*arrange_subplots(), 2)
plt.plot(telemetry_data[MET], telemetry_data[ACCEL])
plt.title("Acceleration")
plt.xlabel("MET (s)")
plt.ylabel("Acceleration (g)")
plt.grid()

plt.subplot(*arrange_subplots(), 3)
plt.plot(telemetry_data[MET], telemetry_data[ORB_VEL])
plt.title("Orbital Velocity")
plt.xlabel("MET (s)")
plt.ylabel("Orbital velocity (m/s)")
plt.grid()

plt.subplot(*arrange_subplots(), 4)
plt.plot([alt_asl / 1000 for alt_asl in telemetry_data[ALT_ASL]],
         telemetry_data[DYN_PRES])
plt.title("Dynamic Pressure")
plt.xlabel("Altitude ASL (km)")
plt.ylabel("Q (Pa)")
plt.grid()

if args.verbose:
    plt.subplot(*arrange_subplots(), 5)
    plt.plot(telemetry_data[MET][3:], telemetry_data[AOA][3:]) # remove erroneous measurements
    plt.title("Angle of Attack")
    plt.xlabel("MET (s)")
    plt.ylabel("AoA (deg)")
    plt.grid()

    plt.subplot(*arrange_subplots(), 6)
    plt.plot(telemetry_data[MET], telemetry_data[DV_EXP], label="Δv Expended")
    tan_vel = telemetry_data[ORB_VEL][0]
    dv_lost = [dv_exp - telemetry_data[ORB_VEL][i] +
               tan_vel for i, dv_exp in enumerate(telemetry_data[DV_EXP])]
    plt.plot(telemetry_data[MET], dv_lost, label="Δv Lost")
    plt.title("Delta-v Expenditure")
    plt.xlabel("MET (s)")
    plt.ylabel("Δv (m/s)")
    plt.legend(loc="upper left")
    plt.grid()

plt.subplots_adjust(hspace=0.5, wspace=0.3)  # prevent overlap

if args.out:
    print(f"Saving graph to \"{args.out.name}\"")
    plt.savefig(args.out)
    args.out.close()

if not args.no_view:
    print("Opening preview")
    plt.show()

print("Done")
sys.exit(0)
